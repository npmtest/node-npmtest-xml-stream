{"/home/travis/build/npmtest/node-npmtest-xml-stream/test.js":"/* istanbul instrument in package npmtest_xml_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xml-stream/lib.npmtest_xml_stream.js":"/* istanbul instrument in package npmtest_xml_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xml_stream = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xml_stream = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xml-stream/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xml-stream && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xml_stream */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xml_stream\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xml_stream.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_xml_stream.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xml_stream.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_xml_stream.__dirname +\n                    '/lib.npmtest_xml_stream.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xml-stream/node_modules/xml-stream/index.js":"module.exports = require('./lib/xml-stream.js');\n","/home/travis/build/npmtest/node-npmtest-xml-stream/node_modules/xml-stream/lib/xml-stream.js":"var events         = require('events')\n  , expat          = require('node-expat')\n  , FiniteAutomata = require('./finite-automata')\n  , Iconv          = require('iconv').Iconv\n  ;\n\n// Retains link to hasOwnProperty.\nvar __own = Object.prototype.hasOwnProperty;\n\n// Tests if object is empty (has no own properties).\nfunction isEmpty(obj) {\n  for (var key in obj) if (__own.call(obj, key)) {\n    return false;\n  }\n  return true;\n}\n\n// XML entities.\nvar entities = {\n  '\"': '&quot;',\n  '&': '&amp;',\n  '\\'': '&apos;',\n  '<': '&lt;',\n  '>': '&gt;'\n};\n\n// Escapes text for XML.\nfunction escape(value) {\n  return value.replace(/\"|&|'|<|>/g, function(entity) {\n    return entities[entity];\n  });\n}\n\n// Parser events to finite automata events mapping.\nvar faModes = {\n  'startElement': 'enter',\n  'endElement': 'leave',\n  'text': 'state'\n};\n\n// I accidentally the whole class.\nmodule.exports = XmlStream;\n\n// **XmlStream** is an XML stream filter based on Expat.\n// It traverses a given stream and emits events for predefined selectors.\n// Event listeners receive selected elements, context, and trace from root.\nfunction XmlStream(stream, encoding) {\n  events.EventEmitter.call(this);\n  this._stream = stream;\n  this._fa = new FiniteAutomata();\n  this._lastState = 0;\n  this._startState = {};\n  this._finalStates = {};\n  this._emitData = false;\n  this._bufferLevel = 0;\n  this._preserveLevel = 0;\n  this._preserveWhitespace = 0;\n  this._preserveAll = false;\n  this._collect = false;\n  this._parser = undefined;\n\n  // Set input stream encoding and create an iconv instance,\n  // if conversion is required. Default working encoding is UTF-8,\n  // so iconv is used when input is anything else, but UTF-8.\n  this._encoding = encoding || null;\n  this._encoder = makeEncoder(this._encoding);\n\n  var scope = this;\n\n  // Start parsing.\n  process.nextTick(function () {\n    parse.call(scope);\n  });\n}\n\n// Either make an iconv instance, or not.\nfunction makeEncoder(encoding) {\n  if (encoding && !/^utf-?8$/i.test(encoding)) {\n    return new Iconv(encoding, 'utf8');\n  }\n  return null;\n}\n\n// Inherit events.EventEmitter.\nXmlStream.super_ = events.EventEmitter;\nXmlStream.prototype = Object.create(events.EventEmitter.prototype, {\n  constructor: {\n    value: XmlStream,\n    enumerable: false\n  }\n});\n\n// Adds a listener for the specified event.\n//\n// Supported events:\n//\n// * `data` on outgoing data chunk,\n// * `end` when parsing has ended,\n// * `startElement[: selector]` on opening tag for selector match,\n// * `updateElement[: selector]` on finished node for selector match\n//   with its contents buffered,\n// * `endElement[: selector]` on closing tag for selector match,\n// * `text[: selector]` on tag text for selector match.\n//\n// When adding listeners for `startElement`, `updateElement`, and `text` the\n// callback can modify the provided node, before it is sent to the consumer.\n//\n// Selector syntax is CSS-like and currently supports:\n//\n// * `ancestor descendant`\n// * `parent > child`\nXmlStream.prototype.on = function(eventName, listener) {\n  var event = parseEvent(eventName);\n  if (event !== null) {\n    // If we're dealing with a selector event,\n    // continue with selector-specific processing logic.\n    XmlStream.super_.prototype.on.call(this, event.name, listener);\n    var finalState = getFinalState.call(this, event.selector);\n    var self = this;\n    if (event.type === 'updateElement') {\n      this._fa.on('enter', finalState, function() {\n        self._bufferLevel++;\n      });\n      this._fa.on('leave', finalState, function(element, context, trace) {\n        self.emit(event.name, element, context, trace);\n        if (!--self._bufferLevel && self._emitData) {\n           emitElement.call(self, element, self._name, true);\n        }\n      });\n    } else {\n      var fn = function(element, context, trace) {\n        self.emit(event.name, element, context, trace);\n      };\n      this._fa.on(faModes[event.type], finalState, fn);\n    }\n  } else {\n    // Otherwise, we're dealing with a non-selector event.\n    if (eventName === 'data') {\n      this._emitData = true;\n    }\n    XmlStream.super_.prototype.on.call(this, eventName, listener);\n  }\n};\n\n// Collects elements with identical names, specified by a selector.\n// They will reside in the parent element as an array.\nXmlStream.prototype.collect = function(selector) {\n  selector = normalizeSelector(selector);\n  var finalState = getFinalState.call(this, selector);\n  var self = this;\n  this._fa.on('flag', finalState, function() {\n    self._collect = true;\n  });\n};\n\n// Preserves the order of element and text nodes inside elements\n// that match the selector. Optionally, preserves whitespace.\nXmlStream.prototype.preserve = function(selector, whitespace) {\n  selector = normalizeSelector(selector);\n  var finalState = getFinalState.call(this, selector);\n  var self = this;\n  this._fa.on('enter', finalState, function() {\n    self._preserveLevel++;\n    if (whitespace) {\n      self._preserveWhitespace++;\n    }\n  });\n  this._fa.on('leave', finalState, function() {\n    self._preserveLevel--;\n    if (whitespace) {\n      self._preserveWhitespace--;\n    }\n  });\n};\n\n// pause expat\nXmlStream.prototype.pause = function() {\n  this._stream.pause();\n  this._suspended = true;\n  if( !this._parser.pause() ) {\n      throw(new Error(\"Cannot pause parser: \"+this._parser.getError()));\n  }\n}\n\n// resume expat\nXmlStream.prototype.resume = function() {\n  this._suspended = false;\n\n  if( !this._parser.resume() ) {\n    throw(new Error(\"Cannot resume parser: \"+this._parser.getError()));\n  }\n\n  // resume stream only if parser hasn't been paused again\n  if( !this._suspended ) {\n    this._stream.resume();\n  }\n}\n\n// Normalizes the selector and returns the new version and its parts.\nfunction normalizeSelector(selector) {\n  var parts = selector.match(/[^\\s>]+|>/ig);\n  selector = (parts) ? parts.join(' ') : '';\n  return {\n    normalized: selector,\n    parts: parts || []\n  };\n}\n\n// Parses the selector event string and returns event information.\nfunction parseEvent(event) {\n  var eventParts = event.match(/^((?:start|end|update)Element|text):?(.*)/);\n  if (eventParts === null) {\n    return null;\n  }\n  var eventType = eventParts[1];\n  var selector = normalizeSelector(eventParts[2]);\n  return {\n    selector: selector,\n    type: eventType,\n    name: (eventParts[2]) ? eventType + ': ' + selector.normalized\n                          : eventType\n  };\n}\n\n// Compiles a given selector object to a finite automata\n// and returns its last state.\nfunction getFinalState(selector) {\n  if (__own.call(this._finalStates, selector.normalized)) {\n    var finalState = this._finalStates[selector.normalized];\n  } else {\n    var n = selector.parts.length;\n    var immediate = false;\n    this._startState[this._lastState] = true;\n    for (var i = 0; i < n; i++) {\n      var part = selector.parts[i];\n      if (part === '>') {\n        immediate = true;\n      } else {\n        if (!immediate) {\n          this._fa.transition(this._lastState, '', this._lastState);\n        }\n        this._fa.transition(this._lastState, part, ++this._lastState);\n        immediate = false;\n      }\n    }\n    var finalState = this._lastState++;\n    this._finalStates[selector.normalized] = finalState;\n  }\n  return finalState;\n}\n\n// Emits XML for element opening tag.\nfunction emitStart(name, attrs) {\n  this.emit('data', '<' + name);\n  for (var attr in attrs) if (__own.call(attrs, attr)) {\n    this.emit('data', ' ' + attr + '=\"' + escape(attrs[attr]) + '\"');\n  }\n  this.emit('data', '>');\n}\n\n// Emits XML for element closing tag.\nfunction emitEnd(name) {\n  this.emit('data', '</' + name + '>');\n}\n\n// Emits XML for element text.\nfunction emitText(text) {\n  this.emit('data', escape(text));\n}\n\n// Emits a single element and its descendants, or an array of elements.\nfunction emitElement(element, name, onLeave) {\n  if (Array.isArray(element)) {\n    var i;\n    for (i = 0; i < element.length - 1; i++) {\n      emitOneElement.call(this, element[i], name);\n    }\n    emitOneElement.call(this, element[i], name, onLeave);\n  } else {\n    emitOneElement.call(this, element, name, onLeave);\n  }\n}\n\n// Emits child element collection and their descendants.\n// Works only with preserved nodes.\nfunction emitChildren(elements) {\n  var i;\n  for (i = 0; i < elements.length; i++) {\n    var element = elements[i];\n    if (typeof element === 'object') {\n      emitStart.call(this, element.$name, element.$);\n      emitChildren.call(this, element.$children);\n      emitEnd.call(this, element.$name);\n    } else {\n      emitText.call(this, element);\n    }\n  }\n}\n\n// Recursively emits a given element and its descendants.\nfunction emitOneElement(element, name, onLeave) {\n  if (typeof element === 'object') {\n    emitStart.call(this, name, element.$);\n    if (__own.call(element, '$children')) {\n      emitChildren.call(this, element.$children);\n    } else {\n      var hasText = false;\n      for (var child in element) {\n        if (__own.call(element, child) && child !== '$' && child != '$name') {\n          if (child === '$text') {\n            hasText = true;\n          } else {\n            emitElement.call(this, element[child], child);\n          }\n        }\n      }\n      if (hasText) {\n        emitText.call(this, element.$text);\n      }\n    }\n  } else {\n    emitStart.call(this, name, element.$);\n    emitText.call(this, element);\n  }\n  if (!onLeave) {\n    emitEnd.call(this, name);\n  }\n}\n\n// Starts parsing the source stream and emitting various events.\n// The Expat parser is assigned several listeners for this purpose.\nfunction parse() {\n  var self = this;\n  var xml = new expat.Parser('utf-8');\n  this._parser = xml;\n  this._suspended = false;\n  var stack = [];\n  var trace = {};\n  var curr = {\n    element: {},\n    collect: this._collect,\n    fullText: '',\n    space: 0,\n    path: '',\n    context: {}\n  };\n  var fa = this._fa;\n  fa.setState(this._startState);\n\n  // A listener is assigned on opening tag encounter.\n  // Here we traverse the configured finite automata use the stack\n  // to form the context and trace for selector event emission.\n  xml.on('startElement', function(name, attr) {\n    self.emit('startElement', name, attr);\n    stack.push(curr);\n    trace[curr.path] = curr.element;\n    var context = Object.create(curr.context);\n    var element = {\n      $: attr,\n      $name: name,\n      $text: ''\n    };\n    var parent = curr.element;\n    curr = {\n      element: element,\n      collect: false,\n      fullText: '',\n      space: 0,\n      path: curr.path + '/' + name,\n      context: context\n    };\n    self._collect = false;\n    fa.enter(name, [element, context, trace]);\n    if (self._preserveLevel > 0) {\n      element.$children = [];\n    }\n    name = element.$name;\n    curr.collect = self._collect;\n    if (curr.collect) {\n      var container;\n      if (__own.call(parent, name)) {\n        container = parent[name];\n        container.push(element);\n      } else {\n        container = [element];\n        parent[name] = container;\n      }\n    } else {\n      parent[name] = element;\n      context[name] = element;\n    }\n    if (self._bufferLevel === 0 && self._emitData) {\n      emitStart.call(self, name, element.$);\n    }\n  });\n\n  // A listener is assigned on closing tag encounter.\n  // Current node structure object is finalized. A selector listener is\n  // invoked with current node, context, and trace; these arguments are\n  // removed from the stack afterwards.\n  xml.on('endElement', function(name) {\n    self.emit('endElement', name);\n    var prev = stack.pop();\n    var element = curr.element;\n    var text = curr.fullText;\n    var attr = element.$;\n    if (typeof attr !== 'object') {\n      attr = {};\n    }\n    var name = element.$name;\n    self._name = name;\n    delete element.$;\n    delete element.$text;\n    delete element.$name;\n    var val = element;\n    if (isEmpty(element) && isEmpty(attr)) {\n      val = text;\n    } else if (!isEmpty(attr)) {\n      element.$ = attr;\n    }\n    if (text !== '') {\n      element.$text = text;\n    }\n    if (self._bufferLevel > 0 || self._preserveLevel > 0) {\n      element.$name = name;\n    }\n    curr.context[name] = val;\n    if (curr.collect) {\n      var container = prev.element[name];\n      container[container.length - 1] = val;\n    } else {\n      prev.element[name] = val;\n    }\n    fa.leave([element, curr.context, trace]);\n    if (self._preserveLevel > 0) {\n      prev.element.$children.push(val);\n    }\n    if (self._bufferLevel === 0 && self._emitData) {\n      emitEnd.call(self, name);\n    }\n    curr = prev;\n    this._collect = curr.collect;\n  });\n\n  // Collect node text part by part\n  // (and trim leading and trailing whitespace).\n  xml.on('text', function(text) {\n    curr.element.$text = text;\n    fa.run('state', [curr.element, curr.context, trace]);\n    if (self._bufferLevel === 0 && self._emitData) {\n      emitText.call(self, text);\n    }\n    if (!self._preserveAll) {\n        var trimmed = curr.element.$text.trim();\n        var spaced = curr.element.$text.substr(0, 1);\n        spaced = (spaced !== '') && (spaced.trim() === '');\n        var after = curr.element.$text.substr(-1, 1);\n        after = (after !== '') && (after.trim() === '');\n        switch (curr.space) {\n          // No words yet (pass through spaces).\n          case 0:\n            if (trimmed !== '') {\n              curr.space = after ? 2 : 1;\n            }\n            break;\n\n          // Immediately after text or entity.\n          case 1:\n            if (trimmed === '') {\n              curr.space = 2;\n            } else {\n              if (spaced) {\n                curr.fullText += ' ';\n              }\n              if (after) {\n                curr.space = 2;\n              }\n            }\n            break;\n\n          // Some words were emitted, pass through spaces again.\n          // Emit spaces only when a word is encountered afterwards.\n          case 2:\n            if (trimmed !== '') {\n              curr.fullText += ' ';\n              curr.space = 1;\n            }\n            break;\n        }\n        text = self._preserveWhitespace > 0 ? text : trimmed;\n        if (self._preserveLevel > 0) {\n          if (text !== '') {\n            curr.element.$children.push(text);\n          }\n        }\n    }\n    curr.fullText += text;\n  });\n\n\n  // This prelude array and string are used during encoding detection.\n  // Incoming buffers are collected and parsing is postponed,\n  // but only until the first tag.\n  var prelude = '';\n  var preludeBuffers = [];\n\n  // Parse incoming chunk.\n  // Convert to UTF-8 or emit errors when appropriate.\n  var parseChunk = function(data) {\n    if (self._encoder) {\n      data = self._encoder.convert(data);\n    }\n    if (!xml.parse(data, false)) {\n      self.emit('error', new Error(xml.getError()+\" in line \"+xml.getCurrentLineNumber()));\n    }\n  }\n\n  // Pass data from stream to parser.\n  this._stream.on('data', function(data) {\n    if (self._encoding) {\n      parseChunk(data);\n    } else {\n      // We can't parse when the encoding is unknown, so we'll look into\n      // the XML declaration, if there is one. For this, we need to buffer\n      // incoming data until a full tag is received.\n      preludeBuffers.push(data);\n      prelude += data.toString();\n      if (/^\\s*<[^>]+>/.test(prelude)) {\n        var matches = prelude.match(/^\\s*<\\?xml[^>]+encoding=\"(.+?)\"[^>]*\\?>/);\n        self._encoding = matches ? matches[1] : 'utf8';\n        self._encoder = makeEncoder(self._encoding);\n        for (var i = 0, n = preludeBuffers.length; i < n; i++) {\n          parseChunk(preludeBuffers[i]);\n        }\n      }\n    }\n  });\n\n  // End parsing on stream EOF and emit an *end* event ourselves.\n  this._stream.on('end', function() {\n    if (!xml.parse('', true)) {\n      self.emit('error', new Error(xml.getError()+\" in line \"+xml.getCurrentLineNumber()));\n    }\n    self.emit('end');\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-xml-stream/node_modules/xml-stream/lib/finite-automata.js":"module.exports = FiniteAutomata;\nfunction FiniteAutomata() {\n  this._symbols = {};\n  this._states = {};\n  this._deterministic = true;\n  this._state = {};\n  this._callbacks = {\n    enter: {},\n    leave: {},\n    state: {},\n    flag: {}\n  };\n  this._stack = [];\n  this._stackPtr = -1;\n}\n\nvar __own = Object.prototype.hasOwnProperty;\n\nfunction extend(target, source) {\n  for (var key in source) if (__own.call(source, key)) {\n    target[key] = source[key];\n  }\n}\n\nfunction run(type, args) {\n  var cbs = this._callbacks[type];\n  for (var cb in this._state) if (__own.call(this._state, cb)) {\n    if (__own.call(cbs, cb)) {\n      var length = cbs[cb].length;\n      var cbList = cbs[cb];\n      for (var i = 0; i < length; i++) {\n        cbList[i].apply(global, args);\n      }\n    }\n  }\n}\n\nFiniteAutomata.prototype.isDeterministic = function() {\n  return this._deterministic;\n};\n\nFiniteAutomata.prototype.on = function(type, state, cb) {\n  if (!__own.call(this._callbacks, type)) {\n    this._callbacks[type] = {};\n  }\n  var typeCbs = this._callbacks[type];\n  if (!__own.call(typeCbs, state)) {\n    typeCbs[state] = [];\n  }\n  typeCbs[state].push(cb);\n  return this;\n};\n\nFiniteAutomata.prototype.setState = function(state, args) {\n  this._state = state;\n  run.call(this, 'enter', args);\n  run.call(this, 'state', args);\n  return this;\n};\n\nFiniteAutomata.prototype.nextState = function(symbol) {\n  var newState = {};\n  for (var st in this._state) if (__own.call(this._state, st)) {\n    if (__own.call(this._states, st)) {\n      var next = this._states[st];\n      if (__own.call(next, symbol)) {\n        extend(newState, next[symbol]);\n      }\n      if (__own.call(next, '')) {\n        extend(newState, (next['']));\n      }\n    }\n  }\n  return newState;\n};\n\nFiniteAutomata.prototype.go = function(symbol, args) {\n  var next = this.nextState(symbol)\n  this.setState(next, args);\n  return this;\n};\n\nFiniteAutomata.prototype.leave = function(args) {\n  this._stack[this._stackPtr] = undefined;\n  run.call(this, 'leave', args);\n  this._state = this._stack[--this._stackPtr];\n  return this;\n};\n\nFiniteAutomata.prototype.enter = function(symbol, args) {\n  if (args == null) {\n    args = [];\n  }\n  var next = this.nextState(symbol);\n  this._stack[++this._stackPtr] = next;\n  this._state = next;\n  run.call(this, 'flag');\n  run.call(this, 'enter', args);\n  return this;\n};\n\nFiniteAutomata.prototype.run = function(state, args) {\n  run.call(this, state, args);\n};\n\nFiniteAutomata.prototype.transition = function(stateFrom, symbol, stateTo) {\n  this._symbols[symbol] = true;\n  var s;\n  if (__own.call(this._states, stateFrom)) {\n    s = this._states[stateFrom];\n  } else {\n    s = this._states[stateFrom] = {};\n  }\n  var exists = __own.call(s, symbol);\n  if (exists) {\n    s = s[symbol];\n  } else {\n    s = s[symbol] = {};\n  }\n  if (!__own.call(s, stateTo)) {\n    s[stateTo] = true;\n    this._deterministic &= !exists;\n  }\n  return this;\n};\n"}